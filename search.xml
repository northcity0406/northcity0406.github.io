<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Dubbo SPI扩展原理和实践]]></title>
    <url>%2F2019%2F11%2F20%2FDubbo%20SPI%E6%89%A9%E5%B1%95%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[1. Dubbo SPI扩展原理1.1 Dubbo SPI扩展相比JAVA SPI扩展的缺点 JAVA SPI会加载所有的所有的扩展，如果有JAVA的扩展加载很耗时，或者没有用上，这会很浪费资源。Dubbo的SPI扩展类按需加载，减少了资源的浪费。 JAVA SPI的扩展类加载失败可能会丢失异常信息。 JAVA的扩展类记载后会直接实例化所有的扩展。Dubbo扩展类会先加载所有的扩展类（即Class对象），但不立即初始化，只会按需进行实例化。并且实例化的过程中添加了IOC和AOP的支持。 1.2 Dubbo SPI扩展的配置规范 路径 META-INF/service META-INF/dubbo META-INF/dubbo/internal SPI配置文件名称 被扩展接口的全路径名称 文件格式 key = value格式 换行分割 1.3 扩展点注解@SPI注解123456@Documented@Retention(RetentionPolicy.RUNTIME)@Target(&#123;ElementType.TYPE&#125;)public @interface SPI &#123; String value() default "";&#125; @SPI注解可以表示为该扩展的默认使用的扩展，该注解的value将会是扩展配置文件中的key中的一个。 123456@Documented@Retention(RetentionPolicy.RUNTIME)@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)public @interface Adaptive &#123; String[] value() default &#123;&#125;;&#125; @Adaptive注解使用一个数组来表示一系列扩展的实现。这里面的数组里面的值都是扩展配置文件中的key。该注解表示该方法会按照顺序来使用实现的扩展，如果前面的无法加载使用，直接使用下一个，以次类推。但是只会使用一个实现。 2. Dubbo SPI扩展实例2.1 IPrinter接口 使用@SPI注解修饰，默认值为text print方法使用@Adaptive({“text”,”image”})修饰，表示按顺序选择实际执行的实例123456789package com.northcity.api;import com.alibaba.dubbo.common.extension.Adaptive;import com.alibaba.dubbo.common.extension.SPI;@SPI("text)public interface IPrinter &#123; @Adaptive(&#123;"text","image"&#125;) public String print();&#125; 2.2 ImagePrinter实例1234567package com.northcity.printer;import com.northcity.api.IPrinter;public class ImagePrinter implements IPrinter &#123; public String print() &#123; return "Image Printer"; &#125;&#125; 2.3 TextPrinter实例1234567package com.northcity.printer;import com.northcity.api.IPrinter;public class TextPrinter implements IPrinter &#123; public String print() &#123; return "Text Printer"; &#125;&#125; 2.4 Main方法123456789101112131415package com.northcity;import com.alibaba.dubbo.common.extension.ExtensionLoader;import com.northcity.api.IPrinter;public class Main &#123; public static void main(String [] args)&#123; //使用默认的Printer实现 IPrinter iPrinter = ExtensionLoader.getExtensionLoader(IPrinter.class).getDefaultExtension(); System.out.println("default:\t" + iPrinter.print()); //使用ImagePrinter实现 iPrinter = ExtensionLoader.getExtensionLoader(IPrinter.class).getExtension("image"); System.out.println("image:\t" + iPrinter.print()); &#125;&#125; 2.5 Dubbo配置实现12image=com.northcity.printer.ImagePrintertext=com.northcity.printer.TextPrinter` 项目源码]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA注解原理解析和自定义注解]]></title>
    <url>%2F2019%2F11%2F20%2FJAVA%20annotation%2F</url>
    <content type="text"><![CDATA[1.JAVA注解原理解析JAVA注解基本形式 注解是Java 1.5引入的，可以提供代码的额外信息，目前正在被广泛应用。12345678@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Inherited@Documentedpublic @interface Msg &#123; String DEFAULT_MSG = "msg"; String msg() default DEFAULT_MSG&#125; 上述代码展示了一个基本的注解，可以看出注解都有以下特点： 1) @Interface关键字定义注解； 2) 注解可以被其他的注解修饰； 3) 注解和接口相似，内部可以定义常量和方法； 元注解@Target 描述注解使用的范围 范围描述 作用 ElementType.PACKAGE 注解作用于包 ElementType.TYPE 注解作用于类型（类，接口，注解，枚举） ElementType.ANNOTATION_TYPE 注解作用于注解 ElementType.CONSTRUCTOR 注解作用于构造方法 ElementType.METHOD 注解作用于方法 ElementType.PARAMETER 注解作用于方法参数 ElementType.FIELD 注解作用于属性 ElementType.LOCAL_VARIABLE 注解作用于局部变量 @Retention 描述注解使用的范围 范围描述 作用 RetentionPolicy.SOURCE 源码中保留，编译期可以处理 RetentionPolicy.CLASS Class文件中保留，Class加载时可以处理 RetentionPolicy.RUNTIME 运行时保留，运行中可以处理 默认RetentionPolicy.CLASS值 @Inherited注解 @Inherited注解修饰的注解作用于一个类，则该注解将被用于该类的子类。 @Documented 描述注解可以文档化，是一个标记注解。在生成javadoc的时候，是不包含注释的，但是如果注解被@Documented修饰，则生成的文档就包含该注解。 自定义JAVA注解自定义的Printer注解123456789import java.lang.annotation.*;@Target(ElementType.FIELD)@Retention(RetentionPolicy.RUNTIME)@Inherited@Documentedpublic @interface PrinterAnnotation &#123; String value() default "";&#125; IPrinter的Printer接口123public interface IPrinter &#123; public void Print();&#125; 图片打印机的实现123456import com.northcity.api.IPrinter;public class ImagePrinter implements IPrinter &#123; public void Print() &#123; System.out.println("Image Printer"); &#125;&#125; 文本打印机123456import com.northcity.api.IPrinter;public class TextPrinter implements IPrinter &#123; public void Print() &#123; System.out.println("Text Printer"); &#125;&#125; 打印功能的实现123456789101112import com.northcity.annotation.PrinterAnnotation;import com.northcity.api.IPrinter;public class Printer&#123; @PrinterAnnotation("TextPrinter") private IPrinter iPrinter; public void setiPrinter(IPrinter iPrinter) &#123; this.iPrinter = iPrinter; &#125; public void Print()&#123; iPrinter.Print(); &#125;&#125; 使用反射注入Printer1234567891011121314151617181920212223import com.northcity.annotation.PrinterAnnotation;import com.northcity.impl.ImagePrinter;import com.northcity.impl.TextPrinter;import java.lang.reflect.Field;public class Main &#123; public static void main(String [] args) throws IllegalAccessException, InstantiationException &#123; //获取Printer的Class对象 Class&lt;Printer&gt; printerClass = Printer.class; //获取Printer的实例对象 Printer printer = (Printer)printerClass.newInstance(); //遍历Printer的Class的所有Filed对象 for(Field field : printerClass.getDeclaredFields())&#123; //获得该Field的PrinterAnnotation注解 PrinterAnnotation spiAnnotation = (PrinterAnnotation) field.getAnnotation(PrinterAnnotation.class); //获得该注解的值 String value = spiAnnotation.value(); //根据注解的值注入对应的 if(value.equals("TextPrinter")) printer.setiPrinter(new TextPrinter()); else printer.setiPrinter(new ImagePrinter()); &#125; printer.Print(); &#125;&#125; 在本示例中，我们使用注解来指定打印时所使用的打印机的具体实现，然后使用反射的方法来获取该注解的值，接下来根据注解的值生成相应的对象并注入，最后就可以使用具体的Printer来打印。 github 源码]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA SPI原理分析]]></title>
    <url>%2F2019%2F11%2F20%2FJAVA%20SPI%2F</url>
    <content type="text"><![CDATA[1.什么是SPI? SPI 全称为 (Service Provider Interface) ，是JDK内置的一种服务提供发现机制。SPI是一种动态替换发现的机制， 比如有个接口，想运行时动态的给它添加实现，你只需要添加一个实现。我们经常遇到的就是java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，mysql和postgresql都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。 2.SPI应用实例 当服务的提供者提供了一种接口的实现之后，需要在classpath下的META-INF/services/目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的META-INF/services/中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK中查找服务实现的工具类是：java.util.ServiceLoader。 打印机接口1234package com.northcity.spi.PrinterInterface;public interface IPrinter &#123; public void Print();&#125; 图片打印机1234567package com.northcity.spi.PrinterImpl;import com.northcity.spi.PrinterInterface.IPrinter;public class ImagePrinter implements IPrinter &#123; public void Print() &#123; System.out.println("Image printer"); &#125;&#125; 文字打印机1234567package com.northcity.spi.PrinterImpl;import com.northcity.spi.PrinterInterface.IPrinter;public class TextPrinter implements IPrinter &#123; public void Print() &#123; System.out.println("Text printer"); &#125;&#125; 调用方法1234567891011package com.northcity.spi;import com.northcity.spi.PrinterInterface.IPrinter;import java.util.ServiceLoader;public class Main &#123; public static void main(String [] args)&#123; ServiceLoader&lt;IPrinter&gt; serviceLoader = ServiceLoader.load(IPrinter.class); for(IPrinter iPrinter : serviceLoader)&#123; iPrinter.Print(); &#125; &#125;&#125; 接口实现配置12com.northcity.spi.PrinterImpl.ImagePrintercom.northcity.spi.PrinterImpl.TextPrinter 目录结构 运行结果 源码地址SPI实例，请参考github 3.原理分析1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556private boolean hasNextService() &#123; if (nextName != null) &#123; return true; &#125; if (configs == null) &#123; try &#123; //private static final String PREFIX = "META-INF/services/"; //读取PREFIX下面的所有的Service的名字， String fullName = PREFIX + service.getName(); if (loader == null) configs = ClassLoader.getSystemResources(fullName); else configs = loader.getResources(fullName); &#125; catch (IOException x) &#123; fail(service, "Error locating configuration files", x); &#125; &#125; while ((pending == null) || !pending.hasNext()) &#123; if (!configs.hasMoreElements()) &#123; return false; &#125; pending = parse(service, configs.nextElement()); &#125; nextName = pending.next(); return true;&#125;private S nextService() &#123; if (!hasNextService()) throw new NoSuchElementException(); String cn = nextName; nextName = null; Class&lt;?&gt; c = null; try &#123; //加载具体的实现类 c = Class.forName(cn, false, loader); &#125; catch (ClassNotFoundException x) &#123; fail(service, "Provider " + cn + " not found"); &#125; if (!service.isAssignableFrom(c)) &#123; fail(service, "Provider " + cn + " not a subtype"); &#125; try &#123; //实例化实现类 S p = service.cast(c.newInstance()); providers.put(cn, p); return p; &#125; catch (Throwable x) &#123; fail(service, "Provider " + cn + " could not be instantiated", x); &#125; throw new Error(); // This cannot happen&#125; JAVA的SPI使用了java.util.ServiceLoader类来加载外部包含的服务的实现，使用迭代器的方式来遍历”META-INF/services/“下的所有的服务的具体的实现的类的全路径。nextService函数主要通过加载实现类c = Class.forName(cn, false, loader)以及实例化实现类p = service.cast(c.newInstance())，来返回具体的实现类对象，这样再上文测试代码中就能够获取到配置的实现类的实例。]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu zsh配置]]></title>
    <url>%2F2017%2F10%2F24%2FUbuntu-zsh%2F</url>
    <content type="text"><![CDATA[1.安装 sudo apt-get install zsh 2.配置 wget —no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | shgit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zshcp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrczsh 3.zsh配置文件color&#123;&#123;&#123;autoload colors zsh/terminfoif [[ "$terminfo[colors]" -ge 8 ]]; thencolorsfifor color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; doeval _$color='%&#123;$terminfo[bold]$fg[$&#123;(L)color&#125;]%&#125;'eval $color='%&#123;$fg[$&#123;(L)color&#125;]%&#125;'(( count = $count + 1 ))doneFINISH="%&#123;$terminfo[sgr0]%&#125;"# &#125;&#125;&#125;# 命令提示符 &#123;&#123;&#123;precmd () &#123;local count_db_wth_char=$&#123;# $&#123;$&#123;(%):-%/&#125;//[[:ascii:]]/&#125;&#125;local leftsize=$&#123;# $&#123;(%):-%M%/&#125;&#125;+$count_db_wth_charlocal rightsize=$&#123;# $&#123;(%):-%D %T &#125;&#125;HBAR=" -"FILLBAR="\$&#123;(l.(($COLUMNS - ($leftsize + $rightsize +2)))..$&#123;HBAR&#125;.)&#125;"RPROMPT=$(echo "%(?..$RED%?$FINISH)")PROMPT=$(echo "$BLUE%M$GREEN%/ $WHITE$&#123;(e)FILLBAR&#125; $MAGENTA%D %T$FINISH$CYAN%n $_YELLOW&gt;&gt;&gt;$FINISH ")# 在 Emacs终端 中使用 Zsh 的一些设置if [[ "$TERM" == "dumb" ]]; thensetopt No_zlePROMPT='%n@%M %/&gt;&gt;'alias ls='ls -F'fi&#125;# &#125;&#125;&#125;# 标题栏、任务栏样式&#123;&#123;&#123;case $TERM in (*xterm*|*rxvt*|(dt|k|E)term)preexec () &#123; print -Pn "\e]0;%n@%M//%/\ $1\a" &#125;;;esac# &#125;&#125;&#125;# 关于历史纪录的配置 &#123;&#123;&#123;# 历史纪录条目数量export HISTSIZE=1000# 注销后保存的历史纪录条目数量export SAVEHIST=1000# 历史纪录文件export HISTFILE=~/.zhistory# 以附加的方式写入历史纪录setopt INC_APPEND_HISTORY# 如果连续输入的命令相同，历史纪录中只保留一个setopt HIST_IGNORE_DUPS# 为历史纪录中的命令添加时间戳setopt EXTENDED_HISTORY# 启用 cd 命令的历史纪录，cd -[TAB]进入历史路径setopt AUTO_PUSHD# 相同的历史路径只保留一个setopt PUSHD_IGNORE_DUPS# 在命令前添加空格，不将此命令添加到纪录文件中# setopt HIST_IGNORE_SPACE# &#125;&#125;&#125;# 杂项 &#123;&#123;&#123;# 允许在交互模式中使用注释 例如：# cmd # 这是注释setopt INTERACTIVE_COMMENTS# 启用自动 cd，输入目录名回车进入目录# 稍微有点混乱，不如 cd 补全实用# setopt AUTO_CD# 扩展路径# /v/c/p/p =&gt; /var/cache/pacman/pkgsetopt complete_in_word# 禁用 core dumpslimit coredumpsize 0# Emacs风格 键绑定bindkey -e# 设置 [DEL]键 为向后删除bindkey "\e[3~" delete-char# 以下字符视为单词的一部分WORDCHARS='*?_-[]~=&amp;;!# $%^()&#123;&#125;&lt;&gt;'# &#125;&#125;&#125;# 自动补全功能 &#123;&#123;&#123;setopt AUTO_LISTsetopt AUTO_MENU# 开启此选项，补全时会直接选中菜单项# setopt MENU_COMPLETEautoload -U compinitcompinit# 自动补全缓存# zstyle ':completion::complete:*' use-cache on# zstyle ':completion::complete:*' cache-path .zcache# zstyle ':completion:*:cd:*' ignore-parents parent pwd# 自动补全选项zstyle ':completion:*' verbose yeszstyle ':completion:*' menu selectzstyle ':completion:*:*:default' force-list alwayszstyle ':completion:*' select-prompt '%SSelect: lines: %L matches: %M [%p]'zstyle ':completion:*:match:*' original onlyzstyle ':completion::prefix-1:*' completer _completezstyle ':completion:predict:*' completer _completezstyle ':completion:incremental:*' completer _complete _correctzstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate# 路径补全zstyle ':completion:*' expand 'yes'zstyle ':completion:*' squeeze-slashes 'yes'zstyle ':completion::complete:*' '\\'# 彩色补全菜单eval $(dircolors -b)export ZLSCOLORS="$&#123;LS_COLORS&#125;"zmodload zsh/complistzstyle ':completion:*' list-colors $&#123;(s.:.)LS_COLORS&#125;zstyle ':completion:*:*:kill:*:processes' list-colors '=(# b) # ([0-9]# )*=0=01;31'# 修正大小写zstyle ':completion:*' matcher-list '' 'm:&#123;a-zA-Z&#125;=&#123;A-Za-z&#125;'# 错误校正zstyle ':completion:*' completer _complete _match _approximatezstyle ':completion:*:match:*' original onlyzstyle ':completion:*:approximate:*' max-errors 1 numeric# kill 命令补全compdef pkill=killallzstyle ':completion:*:*:kill:*' menu yes selectzstyle ':completion:*:*:*:*:processes' force-list alwayszstyle ':completion:*:processes' command 'ps -au$USER'# 补全类型提示分组zstyle ':completion:*:matches' group 'yes'zstyle ':completion:*' group-name ''zstyle ':completion:*:options' description 'yes'zstyle ':completion:*:options' auto-description '%d'zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'zstyle ':completion:*:corrections' format $'\e[01;32m -- %d (errors: %e) --\e[0m'# cd ~ 补全顺序zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'# &#125;&#125;&#125;# # 行编辑高亮模式 &#123;&#123;&#123;# Ctrl+@ 设置标记，标记和光标点之间为 regionzle_highlight=(region:bg=magenta # 选中区域special:bold # 特殊字符isearch:underline)# 搜索时使用的关键字# &#125;&#125;&#125;# # 空行(光标在行首)补全 "cd " &#123;&#123;&#123;user-complete()&#123;case $BUFFER in"" ) # 空行填入 "cd "BUFFER="cd "zle end-of-linezle expand-or-complete;;"cd " ) # TAB + 空格 替换为 "cd ~"BUFFER="cd ~"zle end-of-linezle expand-or-complete;;" " )BUFFER="!?"zle end-of-line;;"cd --" ) # "cd --" 替换为 "cd +"BUFFER="cd +"zle end-of-linezle expand-or-complete;;"cd +-" ) # "cd +-" 替换为 "cd -"BUFFER="cd -"zle end-of-linezle expand-or-complete;;* )zle expand-or-complete;;esac&#125;zle -N user-completebindkey "\t" user-complete# 显示 path-directories ，避免候选项唯一时直接选中cdpath="/home"# &#125;&#125;&#125;# # 在命令前插入 sudo &#123;&#123;&#123;# 定义功能sudo-command-line() &#123;[[ -z $BUFFER ]] &amp;&amp; zle up-history[[ $BUFFER != sudo\ * ]] &amp;&amp; BUFFER="sudo $BUFFER"zle end-of-line # 光标移动到行末&#125;zle -N sudo-command-line# 定义快捷键为： [Esc] [Esc]bindkey "\e\e" sudo-command-line# &#125;&#125;&#125;# 命令别名 &#123;&#123;&#123;alias -g ls='ls -F --color=auto'alias -g ll='ls -l'alias -g la='ls -a'alias -g l='ls'alias -g grep='grep --color=auto'# alias -g history='history -fi'alias -g ai='sudo apt-get install'alias -g aar='sudo apt-get autoremove'alias -g ap='sudo apt-get purge'alias -g aud='sudo apt-get update'alias -g aug='sudo apt-get upgrade'alias -g adu='sudo apt-get dist-upgrade'# [Esc][h] man 当前命令时，显示简短说明alias run-help &gt;&amp;/dev/null &amp;&amp; unalias run-helpautoload run-help# 历史命令 top10# alias top10='print -l $&#123;(o)history%% *&#125; | uniq -c | sort -nr | head -n 10'# &#125;&#125;&#125;# 路径别名 &#123;&#123;&#123;# 进入相应的路径时只要 cd ~xxxhash -d HIST="$HISTDIR"# &#125;&#125;&#125;# &#123;&#123;&#123;自定义补全# 补全 pingzstyle ':completion:*:ping:*' hosts g.cn facebook.com# 补全 ssh scp sftp 等my_accounts=(&#123;ly50247,osily,lg50247,root&#125;@&#123;192.168.1.1,192.168.0.1&#125;osily@localhost)zstyle ':completion:*:my-accounts' users-hosts $my_accounts# def pacman-color completion as pacman# compdef pacman-color=pacman# &#125;&#125;&#125;# &#123;&#123;&#123; F1 计算器arith-eval-echo() &#123;LBUFFER="$&#123;LBUFFER&#125;echo \$(( "RBUFFER=" ))$RBUFFER"&#125;zle -N arith-eval-echobindkey "^[[11~" arith-eval-echo# &#125;&#125;&#125;# # # # &#123;&#123;&#123;# function timeconv &#123; date -d @$1 +"%Y-%m-%d %T" &#125;# &#125;&#125;&#125;# # # # &#123;&#123;&#123;function command_not_found_handler() &#123;python /usr/lib/command-not-found $1return 0&#125;# &#125;&#125;&#125;# # END OF FILE # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ################## vim:filetype=zsh foldmethod=marker autoindent expandtab shiftwidth=4export http_proxy=http://192.168.187.145:80#export JAVA_HOME="/usr/lib/jvm/java-6-sun"#export JRE_HOME="/usr/lib/jvm/java-6-sun/jre"export PATH="$PATH:/home/osily/program/bin"#exportCLASSPATH="$CLASSPATH:.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:/home/osily/program/tomcat620/lib:/home/osily/program/tomcat620/lib/servlet-api.jar"alias upg="sudo apt-get update &amp;&amp; sudo apt-get upgrade"alias qq="nohup google-chrome --no-proxy-server --app=http://web.qq.com &gt;/dev/null 2&gt;/dev/null &amp;"#alias tomstart="sudo ~/program/tomcat620/bin/startup.sh"#alias tomshut="sudo ~/program/tomcat620/bin/shutdown.sh"#alias js2="rhino"alias gmusic="google-chrome --no-proxy-server --app=http://g.top100.cn/12174704/html/player.html#loaded"alias apa="dpkg -l |grep ^rc|awk '&#123;print $2&#125;' |sudo xargs dpkg -P"]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 开启WiFi]]></title>
    <url>%2F2017%2F10%2F24%2FUbuntu-Start-Wifi%2F</url>
    <content type="text"><![CDATA[1.下载hostapd： hostapd_1.0-2ubuntu5_amd64.debhttp://old-releases.ubuntu.com/ubuntu/pool/universe/w/wpa/ 安装： sudo dpkg -i hostapd_1.0-2ubuntu5_amd64.debsudo apt-mark hold hostapd 保留当前hostapd ,使其不被升级 2.下载ap-hotspot: ap-hotspot_0.2.1-1-webupd8-1_all.debhttps://launchpad.net/~nilarimogard/+archive/ubuntu/webupd8/+packages在packet name contains 输入 “ap-“ ,点击Filter,然后下载相应的软件 安装： sudo dpkg -i ap-hotspot_0.2.1-1-webupd8-1_all.deb 3.网络配置4.网络开启]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim 开启python/python3支持]]></title>
    <url>%2F2017%2F10%2F24%2Fvim-with-python3%2F</url>
    <content type="text"><![CDATA[1 . 检查vim是否支持python经检查，发现vim不支持python2 2. 下载vim8源码1git clone https://github.com/vim/vim.git 2 . 编译安装vim81234cd vim/srcmake clean./configure --with-features=huge --enable-python3interp --enable-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --enable-rubyinterp --enable-luainterp --enable-perlinterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --enable-multibyte --enable-cscope --prefix=/usr/local/vim/sudo make install 备注说明: —with-features=huge：支持最大特性—enable-rubyinterp：打开对ruby编写的插件的支持—enable-pythoninterp：打开对python编写的插件的支持—enable-python3interp：打开对python3编写的插件的支持—enable-luainterp：打开对lua编写的插件的支持—enable-perlinterp：打开对perl编写的插件的支持—enable-multibyte：打开多字节支持，可以在Vim中输入中文—enable-cscope：打开对cscope的支持—with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ 指定python 路径—with-python-config-dir=/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu/ 指定python3路径—prefix=/usr/local/vim：指定将要安装到的路径(自行创建) 如果出现问题请自得安装python-dev 再执行上面命令 sudo apt-get install python-devsudo apt-get install python3-devsudo apt-get install libncurses5-dev]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django分离的urls.py]]></title>
    <url>%2F2017%2F10%2F24%2Fdjango-url%2F</url>
    <content type="text"><![CDATA[前言：在python的Django框架中，当页面过多时，urls也会逐渐变多，太多的urls放在一起会太繁杂，此时需要一种把urls分类的办法。下面就介绍三种方法。 1.初始状态下的urls.py目录:./mysite/urls.py123456from django.conf.urls import patterns, include, urlfrom blog import views as blogurlpatterns = patterns('', url(r'^blog/index/$','blog.views.index'), url(r'^blog/time/$','blog.viewstime'), ) 2.第一种修改方式目录:./mysite/urls.py123456from django.conf.urls import patterns, include, urlfrom blog import views as blogurlpatterns = patterns('blog.views', url(r'^blog/index/$','index'), #把'blo.views'向上合并 url(r'^blog/time/$','time'), #把'blo.views'向上合并 ) 3.第二种修改方式目录:./mysite/urls.py123456789101112131415from django.conf.urls import patterns, include, urlfrom blog import views as blogfrom testDjango import views as testDjango#testDjango的所有urls.pyurlpatterns = patterns('testDjango.views', url(r'^testDjango/index/$','index'), url(r'^testDjango/time/$','time'), )#blog的所有urls.py(追加)urlpatterns += patterns('blog.views', url(r'^blog/index/$','index'), url(r'^blog/time/$','time'), ) 4.第三种修改方式(在blog和testDjango的app下新建urls.py)目录:./mysite/urls.py1234567from django.conf.urls import patterns, include, urlfrom blog import views as blogfrom testDjango import views as testDjangourlpatterns = patterns('', url(r'^testDjango/',include('testDjango.urls')), #注意这里面没有’$‘符号 url(r'^blog/',include('blog.urls')), #注意这里面没有’$‘符号 ) 目录:./blog/urls.py12345from django.conf.urls import patterns, include, urlurlpatterns = patterns('blog.views', url(r'^index/$','index'), url(r'^time/$','time'), ) 目录:./testDjango/urls.py12345from django.conf.urls import patterns, include, urlurlpatterns = patterns('testDjango.views', url(r'^index/$','index'), #注意这里面有’$‘符号 url(r'^time/$','time'), #注意这里面有’$‘符号 )]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建数据库时设置编码为UTF-8]]></title>
    <url>%2F2017%2F10%2F24%2Fcreate-the-database-for-default-charset-utf-8%2F</url>
    <content type="text"><![CDATA[更新的数据中有中文，出现如下错误： OperationalError at /admin/blog/post/add/(1366, “Incorrect string value: ‘\xE6\xB7\xB1\xE5\x85\xA5…’ for column ‘title’ at row 1”)Request Method: POSTRequest URL: http://localhost:8000/admin/blog/post/add/Exception Type: OperationalErrorException Value: (1366, “Incorrect string value: ‘\xE6\xB7\xB1\xE5\x85\xA5…’ for column ‘title’ at row 1”) Exception Location: C:\Python25\Lib\site-packages\MySQLdb\connections.py in defaulterrorhandler, line 35 类似这样的错误，应该是数据库表的charset和collation问题。尝试把所有表的charset改为utf-8, collation改为utf8-unicode-ci。如果还是不能解决，最好是重建数据库，然后修改数据库的属性，选择charset为utf-8,collation为utf8-unicode-ci。 命令行： create database news default charset utf8 collate utf8_unicode_ci;]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu必备软件及其设置]]></title>
    <url>%2F2017%2F10%2F24%2FUbuntu-setting%2F</url>
    <content type="text"><![CDATA[设置启动器放在底部 gsettings set com.canonical.Unity.Launcher launcher-position Bottom 删除LibreOffice sudo apt-get remove LibreOffice* 删除Amazon的图标 sudo apt-get remove unity-webapps-common 删除不必要的软件 sudo apt-get remove unity-webapps-commonsudo apt-get remove thunderbird totem rhythmbox empathy brasero simple-scan gnome-mahjongg aisleriotsudo apt-get remove gnome-mines cheese transmission-common gnome-orca webbrowser-app gnome-sudoku landscape-client-ui-installsudo apt-get remove rhythmbox evolution bittorrent empathysudo apt-get remove onboard deja-dup 更新源，并安装更新 sudo apt-get updatesudo apt-get upgradesudo apt-get autoremove 安装Unity Tweak Tool sudo apt-get install unity-tweak-tool gnome-tweak-tool 安装aptitude,使得自动解决依赖问题 sudo apt-get install aptitude shutter flashplugin-installer github程序猿必备。 sudo apt-get install git ubuntu自带的字体不太好看，所以采用文泉译微米黑字体替代，效果会比较好 sudo apt-get install fonts-wqy-microhei 安装Numix主题 sudo add-apt-repository ppa:numix/ppasudo apt-get updatesudo apt-get install numix-gtk-theme numix-icon-theme-circle 安装 Slingscold sudo add-apt-repository ppa:noobslab/macbuntusudo apt-get updatesudo apt-get install slingscold albert 开启WiFi(kde5-nm-connection-editor在plasma-nm包内）sudo apt-get install plasma-nm 安装arc-theme sudo add-apt-repository ppa:noobslab/themessudo apt-get updatesudo apt-get install arc-theme Flatabulous主题是一款ubuntu下扁平化主题，执行以下命令安装Flatabulous主题： sudo add-apt-repository ppa:noobslab/themessudo apt-get updatesudo apt-get install flatabulous-theme 该主题有配套的图标，安装方式如下： sudo add-apt-repository ppa:noobslab/iconssudo apt-get updatesudo apt-get install ultra-flat-icons 安装GTK主题 sudo add-apt-repository ppa:numix/ppasudo apt-get update &amp;&amp; sudo apt-get install numix-gtk-theme 安装conky，curl系统监控软件 sudo apt-get install conky conky-all curl 安装压缩类软件 sudo apt-get install unace unrar zip unzip p7zip-full p7zip-rar sharutils rar 安装互联网常用工具 sudo apt-get install filezilla iptux 安装系统工具 sudo apt-get install yakuake htop lrzsz sysstat sshpass curl wget nmap nload tree lynx iptraf 最喜欢的图标主题 Faenza 1.3 sudo add-apt-repository ppa:tiheum/equinoxsudo apt-get update sudo apt-get install faenza-icon-theme square 图标主题(非必须） sudo add-apt-repository ppa:noobslab/icons2sudo apt-get updatesudo apt-get install square-icons 终端采用zsh和oh-my-zsh，既美观又简单易用，主要是能提高你的逼格 sudo apt-get install zshwget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 启动器上苹果Logo wget -O launcher_bfb.png http://drive.noobslab.com/data/Mac/launcher-logo/apple/launcher_bfb.pngsudo mv launcher_bfb.png /usr/share/unity/icons/ 恢复默认 wget -O launcher_bfb.png http://drive.noobslab.com/data/Mac/launcher-logo/ubuntu/launcher_bfb.pngmv launcher_bfb.png /usr/share/unity/icons/ 配置 Mac 字体： wget -O mac-fonts.zip http://drive.noobslab.com/data/Mac/macfonts.zipsudo unzip mac-fonts.zip -d /usr/share/fonts; rm mac-fonts.zipsudo fc-cache -f -v 安装 MacBuntu OS Y Theme、Icons 和 cursors sudo add-apt-repository ppa:noobslab/macbuntusudo apt-get updatesudo apt-get install macbuntu-os-icons-lts-v7sudo apt-get install macbuntu-os-ithemes-lts-v7]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创建第一个Python Django项目]]></title>
    <url>%2F2017%2F10%2F24%2Fthe-first-django-project%2F</url>
    <content type="text"><![CDATA[如果这是你第一次使用Django，你需要完成一些初始化设置。 你需要自己用代码来创建一个Django项目——一个Django框架开发的网站，创建项目后我们需要的配置的东西，包括数据库的配置、针对Django的配置选项和app的配置选项。 cd Workspace/Python/PythonWeb #进入Django的开发目录django-admin.py startproject newsite #使用命令创建第一个Django项目tree 备注: 外层的newsite/根目录仅仅是项目的一个容器。它的命名对Django无关紧要；你可以把它重新命名为任何你喜欢的名字。 manage.py：一个命令行工具，可以使你用多种方式对Django项目进行交互。你可以在django-admin和manage.py中读到关于manage.py的所有细节。 内层的newsite/目录是你的项目的真正的Python包。它是你导入任何东西时将需要使用的Python包的名字（例如 newsite.urls）。 newsite/init.py一个空文件，它告诉Python这个目录应该被看做一个Python包。 （如果你是一个Python初学者，关于包的更多内容请阅读Python的官方文档）。 newsite/settings.py该Django 项目的设置/配置。Django 设置 将告诉你这些设置如何工作。 newsite/urls.py该Django项目的URL声明；你的Django站点的“目录”。 你可以在URL 转发器 中阅读到关于URL的更多内容。 newsite/wsgi.py用于你的项目的与WSGI兼容的Web服务器入口。 更多细节请参见如何利用WSGI进行部署。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>python</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django setting详解]]></title>
    <url>%2F2017%2F10%2F24%2Fdjango-setting%2F</url>
    <content type="text"><![CDATA[setting源代码1234567891011121314151617# Build paths inside the project like this: os.path.join(BASE_DIR, ...)import osBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))# Quick-start development settings - unsuitable for production# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/# SECURITY WARNING: keep the secret key used in production secret!SECRET_KEY = 'w5l7yqw$4o@mf%!ydt)xz+aq-2^(lu@q&amp;z4*8q_&amp;oh5bi*8@nw'# SECURITY WARNING: don't run with debug turned on in production!DEBUG = TrueALLOWED_HOSTS = []# Application definition 项目中安装的APP123456789INSTALLED_APPS = ( 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blog',) 当我们新创建一个APP时,需要把APP添加到上面，例如上面新添加的blog APP(注意不要忘记末尾的”，“) 123456789101112MIDDLEWARE_CLASSES = ( 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.auth.middleware.SessionAuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'django.middleware.security.SecurityMiddleware',)ROOT_URLCONF = 'newsite.urls' 1234567891011121314151617TEMPLATES = [ &#123; 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': &#123; 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], &#125;, &#125;,]WSGI_APPLICATION = 'newsite.wsgi.application' 数据库配置12345678910DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'blog', #数据库的名字 'USER':'', #数据库的用户 'PASSWORD':'', #数据库的用户对应的密码 'HOST':'', #数据库的地址 'PORT':'', #数据库对应的端口 &#125;&#125; 重要补充:当使用mysql最为数据库时，需要先使用命令行创建相应的数据库。 时区与语言设置12LANGUAGE_CODE = 'zh_cn'TIME_ZONE = 'Asia/Shanghai' 注意要把时区和时间改成上述样式。 1234567891011USE_I18N = TrueUSE_L10N = TrueUSE_TZ = True# Static files (CSS, JavaScript, Images)# https://docs.djangoproject.com/en/1.8/howto/static-files/STATIC_URL = '/static/']]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>python</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu使用源码编译安装atop]]></title>
    <url>%2F2017%2F10%2F24%2FUbuntu-compile-atop-by-source-code%2F</url>
    <content type="text"><![CDATA[1.官网： http://www.atoptool.nl/downloadatop.php 2.下载解压编译 wget http://www.atoptool.nl/download/atop-2.2-3.tar.gztar xvf atop-2.2-3.tar.gzcd atop-2.2-3make prefix=/usr/local/atop install 3.warnning （报错rawlog.c:154:18: fatal error: zlib.h: No such file or directory，yum -y install zlib未解决，因为只安装lib没有头文件，提示需要zlib头文件） 4.解决方案： 标准安装zlib官网: http://www.zlib.net/找下载链接：http://zlib.net/zlib-1.2.8.tar.gz或者http://iweb.dl.sourceforge.net/project/libpng/zlib/1.2.8/zlib-1.2.8.tar.gzcd ../wget http://zlib.net/zlib-1.2.8.tar.gztar xzf zlib-1.2.8.tar.gzcd zlib-1.2.8 创建动态库./configure —sharedmake testmake installcp zutil.h /usr/local/includecp zutil.c /usr/local/include 5.重新编译 cd atop-2.2-3make cleanmake install 提示Choose either ‘make systemdinstall’ or ‘make sysvinstall’ #关于采用哪种方式安装可以参考这里：http://www.linuxdiyf.com/linux/10711.html make systemdimstall 6.运行 atop 7.退出 参考：http://my.oschina.net/nox/blog/221014http://blog.sina.com.cn/s/blog_714dacd10102v6et.html]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>监控工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu系统CPU、内存、网络、进程监控工具]]></title>
    <url>%2F2017%2F10%2F23%2FUbuntu-dectet%2F</url>
    <content type="text"><![CDATA[1.1 Top 作用：查看在系统中运行的进程或线程,以及CPU、内存、交换分区等运行方法：sudo top运行结果演示： 第一行： 参数 解释 22:14:44 当前系统时间 57min 系统已经运行了57分钟 1 users 当前有1个用户登录系统 load average: 0.96, 0.74, 0.58 是1分钟、5分钟、15分钟的负载情况 第二行： 参数 解释 257 total 当前系统有257个进程 1 running 一个进程正在运行 240 sleeping 240个进程在休眠 13 stopped 13个进程停止运行 3 zombie 3个zombie状态（僵尸） 第三行：cpu状态 参数 解释 22.8 us 用户空间占用CPU的百分比。 5.2 sy 内核空间占用CPU的百分比。 0.0 ni 改变过优先级的进程占用CPU的百分比 71.6 id 空闲CPU百分比 0.3 wa IO等待占用CPU的百分比 0.0 hi 硬中断（Hardware IRQ）占用CPU的百分比 0.0 si 软中断（Software Interrupts）占用CPU的百分比 第四行：内存状态 参数 解释 16326320 total 物理内存总量 2797296 used 使用中的内存总量 11844292 free 空闲内存总量 1684732 buff/cache 缓存的内存量 （79M） 第五行：swap交换分区 参数 解释 0 total 交换区总量（2GB） 0 used 使用的交换区总量（2.5M） 0 free 空闲交换区总量（2GB） 13082364 avail Mem 缓冲的交换区总量 第七行以下：各进程（任务）的状态监控 参数 解释 PID 进程id USER 进程所有者 PR 进程优先级 NI nice值。负值表示高优先级，正值表示低优先级 VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA SHR 共享内存大小，单位kb S 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程 %CPU 上次更新到现在的CPU时间占用百分比 %MEM 进程使用的物理内存百分比 TIME+ 进程使用的CPU时间总计，单位1/100秒 COMMAND 进程名称（命令名/命令行） 1.2 Htop 作用：查看在系统中运行的进程或线程,以及CPU、内存、交换分区等运行方法：sudo htop运行结果演示： 左上角:CPU、内存、交换分区 参数 值 解释 1 14.9% CPU1的占用百分比 2 16.0% CPU2的占用百分比 3 16.1% CPU3的占用百分比 4 17.4% CPU4的占用百分比 Mem 2.95G/15.6G 内存的使用量与总量 Swp 0K/0K 交换分区的使用量与总量 右上角:任务、线程 参数 解释 Task 163,359 thr;6 running 总的进程、线程数，正在运行的进程数 load average:0.43 0.67 0.68 是1分钟、5分钟、15分钟的负载情况 uptime 01:22:38 系统运行时间 下方的解释详见 # 1.1 Top 1.3 atop 介绍：atop 和 top，htop 非常相似，它也能监控所有进程，但不同于 top 和 htop 的是，它可以按日记录进程的日志供以后分析。它也能显示所有进程的资源消耗。它还会高亮显示已经达到临界负载的资源。作用：查看在系统中运行的进程或线程,以及CPU、内存、交换分区等运行方法：sudo atop运行结果演示： 1.4 powertop 作用：powertop 可以帮助你诊断与电量消耗和电源管理相关的问题。它也可以帮你进行电源管理设置，以实现对你服务器最有效的配置。运行方法：sudo powertop运行结果演示： 1.5 iotop 作用：iotop 用于检查 I/O 的使用情况，并为你提供了一个类似 top 的界面来显示。它按列显示读和写的速率，每行代表一个进程。当发生交换或 I/O 等待时，它会显示进程消耗时间的百分比。运行方法：sudo iotop运行结果演示： 1.6 iftop 作用：iftop 类似于 top，但它主要不是检查 cpu 的使用率而是监听所选择网络接口的流量，并以表格的形式显示当前的使用量。运行方法：sudo iftop结果演示： 1.7 jnettop 作用：jnettop 以相同的方式来监测网络流量但比 iftop 更形象。它还支持自定义的文本输出，并能以友好的交互方式来深度分析日志。运行：sudo jnettop运行结果演示： 1.8 BandwidthD 作用:BandwidthD 可以跟踪 TCP/IP 网络子网的使用情况，并能在浏览器中通过 png 图片形象化地构建一个 HTML 页面。它有一个数据库系统，支持搜索、过滤，多传感器和自定义报表。运行结果演示（外链） 1.9 NetHogs 作用：NetHogs 打破了网络流量按协议或子网进行统计的惯例，它以进程来分组。所以，当网络流量猛增时，你可以使用 NetHogs 查看是由哪个进程造成的。运行方法：sudo Nethogs运行结果演示： 1.10 dstat 作用：dstat 旨在替代 vmstat，iostat，netstat 和 ifstat。它可以让你查实时查看所有的系统资源。这些数据可以导出为 CSV。最重要的是 dstat 允许使用插件，因此其可以扩展到更多领域。]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>CPU</tag>
        <tag>Memory</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[file_in_file]]></title>
    <url>%2F2017%2F10%2F23%2Ffile-in-file%2F</url>
    <content type="text"><![CDATA[File in File 互联网应用经常需要存储用户上传的图片，比如facebook相册。facebook目前存储了2600亿张照片，总大小为20PB，每张照片约为80KB。用户每周新增照片数量为10亿。（总大小60TB），平均每秒新增3500张照片（3500次写请求），读操作峰值可以达到每秒百万次。考虑到一台标配的服务器的硬盘是10TB，理论上可以存 10TB/80KB=1.3亿张左右的照片。然而linux服务器的文件索引的设计最多只支持500w左右的文件数，如果超过500w，性能会大幅下降。在普通的linux文件系统中，读取一个文件包括三次磁盘io:首先读取目录元数据到内存，其次把文件中的inode节点装载到内存，最后读取实际的文件内容。由于小文件个数太多，无法将所有的目录以及文件的inode信息缓存到内存，因此磁盘IO次数很难达到每个图片读取只需要一次磁盘IO的理想状态。因此，facebook的图片存储系统haystack设计采用的思路是: 多个逻辑图片文件共享一个物理文件。1个物理文件的大小=32MB。因此linux服务器中的文件个数在10TB/32MB=1024*1024/32=327680..远远小于linux服务器的文件索引的阈值。照片文件在物理文件中的存放为依次的顺序存放。每个照片文件的存放规格如下:1字节的标记位。0代表接下来的照片仍然可用，1代表接下来的照片已经被删除，2代表该物理文件接下来已经没有图片了。4字节的size。标记照片的大小x。x字节，照片文件本身。这里有一块遵循该规格的物理文件,里面存放着诺干张图片，正确的拿到图片即可看到本题的答案。 12345678910111213141516171819202122232425262728293031323334f = open('rf.data','rb')location = 0cnt = 0while True: f.seek(location,0) flag_str = f.read(1) hexstr = "%s" % (flag_str.encode('hex')) flag = int(hexstr, 16) print flag if flag == 0: f.seek(location + 1,0) size_tmp = f.read(4) hexstr = "%s" % (size_tmp.encode('hex')) size = int(hexstr, 16) print size f.seek(location + 5, 0) image = f.read(size) im_txt = "%d.jpg" %(cnt) d = open(im_txt,'wb') print im_txt d.write(image) d.close() location += 5 + size elif flag == 1: f.seek(location + 1, 0) size_tmp = f.read(4) hexstr = "%s" % (size_tmp.encode('hex')) size = int(hexstr, 16) f.seek(location + 5, 0) location += 5 + size print size elif flag == 2: break cnt += 1]]></content>
      <categories>
        <category>千里码</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>算法设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[稳定匹配]]></title>
    <url>%2F2017%2F10%2F23%2Fstable_match%2F</url>
    <content type="text"><![CDATA[稳定匹配的两种方式 完美匹配 集合M={m1,m2……mn}和集合W={w1,w2……wn},令M×W={(mi,wj)|mi∈M,wi∈W}同时，S∈M×W,S是M×W的一个有序对的集合，且M的任意一个成员和W的任意一个成员都仅仅只会在S中一个对里。 稳定匹配 集合M={m1,m2……mn}和集合W={w1,w2……wn},∀mi∈M,mi对于W有一个偏好排序。同时，∀wj∈W,wj对于M也有一个偏好排序。如果存在一种完美匹配，使得:(以下两者符合其一即可） ∀(mi,wj)∈S,对于mi来说，wj&gt;(∀wk∈W - wj)或者： ∀(mi,wj)∈S,对于wj来说，mi&gt;(∀mk∈M - mi)也就是说，无论对于mi还是wj来说，只要其中的一个得到了最偏好的那一个即可。 G-S算法的伪代码 ∀mi∈M,∀wi∈W,mi和wi都是自由的。While ∃mj∈M,且mj是自由的,∃wk∈W,mj还未向wk求过婚: 选择这样的一个男人mj 令wk是mj的优先表中还未求过婚的排名最高的女人 If wk是自由的 then (mj,wk)变成约会状态 Else wk当前与mt约会: If wk更加偏爱mt而不爱mj Then mj 保持自由 Else wk更加偏爱mj而不爱mt (mj,wk)变成约会状态 mt 变为自由状态 Endif EndifEndWhile G-S算法的特点w选择的约会对象会越来越好。m选择的约会对象会越来越差。 当w处于约会状态下，遇到一个更好的求婚对象时，她会选择抛弃原有的约会对象，从而选择更好的。因此，w的约会对象会越来越好，m的约会对象会越来越差。 G-S算法在至多n2次While循环后终止。 如果m是自由的，那么至少存在未被他求婚的女人。 循环结束时返回的集合S是一个完美匹配。(反证法） G-S算法执行结束返回的集合S是一个稳定匹配。证明：（反证法） G-S算法的每次执行都得到同一个集合S。(即结果不变） 在稳定匹配中S中，每个女人与她最差的有效伴侣配对。]]></content>
      <categories>
        <category>算法设计</category>
      </categories>
      <tags>
        <tag>算法设计</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spider]]></title>
    <url>%2F2017%2F10%2F23%2Fspider%2F</url>
    <content type="text"><![CDATA[千里码豆瓣评分爬取豆瓣电影Top250收录了至今为止，大家最喜欢的250部电影。该列表呈现了每部电影的评分，年份等基本信息。这题的答案很简单，就是这个榜单的前166部电影的评分总和。 千里码：豆瓣评分爬取python1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# -*- coding: UTF-8 -*-import urllib2import requests , reimport sys , MySQLdbimport randomreload ( sys )sys.setdefaultencoding ( &apos;utf-8&apos; )Type = sys.getfilesystemencoding ()# 数据库设置MYSQL_HOST = &apos;localhost&apos;MYSQL_DBNAME = &apos;ip&apos;MYSQL_USER = &apos;mark&apos;MYSQL_PASSWD = &apos;****&apos;MYSQL_PORT = 3306# 此处修改伪造的头字段,headers = &#123; &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11&apos;&#125;#获取代理def getProxy ( conn , cur , columns_data ): flag = random.choice ( columns_data ) sql = &quot;select proxy_ip,proxy_port from proxy where id =%d&quot; % (flag) cur.execute ( sql ) proxy = &#123;&#125; for each in cur.fetchall (): proxy[ &apos;http&apos; ] = &quot;http://%s:%s&quot; % (each[ 0 ] , each[ 1 ]) try: requests.get ( &apos;https://movie.douban.com/top250&apos; , proxies=proxy ) except: print &quot;proxy error&quot; getProxy ( conn , cur , columns_data ) else: print &quot;proxy success&quot; return proxy#获取请求的HTML页面def get_request ( url , headers , conn , cur , columns_data ): proxy = getProxy ( conn , cur , columns_data ) proxy_s = urllib2.ProxyHandler ( proxy ) opener = urllib2.build_opener ( proxy_s ) urllib2.install_opener ( opener ) req = urllib2.Request ( url , headers=headers ) r = urllib2.urlopen ( req ) return r.read ()if __name__ == &quot;__main__&quot;: conn = MySQLdb.connect ( host=MYSQL_HOST , user=MYSQL_USER , passwd=MYSQL_PASSWD , db=MYSQL_DBNAME , port=MYSQL_PORT , charset=&apos;utf8&apos; ) cur = conn.cursor () columns = &quot;select id from proxy&quot; cur.execute ( columns ) columns_data = [ ] for each in cur.fetchall (): columns_data.append ( each[ 0 ] ) url_total = [ &apos;https://movie.douban.com/top250?start=%d&amp;filter=&apos; % (each * 25) for each in range ( 7 ) ] print url_total data = [ ] for each in url_total: print each html = get_request ( each , headers , conn , cur , columns_data ) re_str = r&apos;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(\S+)&lt;/span&gt;&apos; for ebch in re.findall ( re_str , html ): data.append ( float ( str ( ebch ) ) ) print data data = sorted ( data ) print sum ( data[ :166 ] ) 上述代码中对应的代理IP地址的SQL文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for proxy-- ----------------------------DROP TABLE IF EXISTS `proxy`;CREATE TABLE `proxy` ( `id` int(11) NOT NULL AUTO_INCREMENT, `proxy_ip` varchar(255) NOT NULL, `proxy_port` int(11) DEFAULT NULL, `proxy_country` varchar(255) DEFAULT NULL, `proxy_type` varchar(255) DEFAULT NULL, `addtime` varchar(255) DEFAULT NULL, `last_test_time` varchar(255) DEFAULT NULL, `proxy_status` varchar(255) DEFAULT NULL, `Remarks` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=351 DEFAULT CHARSET=utf8;-- ------------------------------ Records of proxy-- ----------------------------INSERT INTO `proxy` VALUES ('126', '219.238.124.221', '3128', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '11 28', '1', 'ly');INSERT INTO `proxy` VALUES ('127', '61.153.67.110', '9999', 'China', 'Elite', 'Tue Sep 26 21:06:32 2017', '11 26', '1', 'ly');INSERT INTO `proxy` VALUES ('128', '47.93.63.47', '8888', 'China', 'Elite', 'Tue Sep 26 21:06:32 2017', '11 26', '1', 'ly');INSERT INTO `proxy` VALUES ('129', '101.37.79.125', '3128', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '10 43', '1', 'ly');INSERT INTO `proxy` VALUES ('130', '203.91.121.76', '3128', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '7 14', '1', 'ly');INSERT INTO `proxy` VALUES ('131', '61.136.163.245', '3128', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '6 29', '1', 'ly');INSERT INTO `proxy` VALUES ('132', '58.22.61.211', '3128', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '6 25', '1', 'ly');INSERT INTO `proxy` VALUES ('133', '42.51.26.79', '3128', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '6 24', '1', 'ly');INSERT INTO `proxy` VALUES ('134', '61.153.108.142', '80', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '6 2', '1', 'ly');INSERT INTO `proxy` VALUES ('135', '110.53.202.169', '808', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '5 53', '1', 'ly');INSERT INTO `proxy` VALUES ('136', '117.141.18.70', '65205', 'China', 'Elite', 'Tue Sep 26 21:06:32 2017', '5 45', '1', 'ly');INSERT INTO `proxy` VALUES ('137', '122.226.183.145', '80', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '5 40', '1', 'ly');INSERT INTO `proxy` VALUES ('138', '43.241.10.206', '8080', 'China', 'Elite', 'Tue Sep 26 21:06:32 2017', '5 40', '1', 'ly');INSERT INTO `proxy` VALUES ('139', '123.118.34.110', '9000', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '5 26', '1', 'ly');INSERT INTO `proxy` VALUES ('140', '124.238.235.135', '81', 'China', 'Elite', 'Tue Sep 26 21:06:32 2017', '5 11', '1', 'ly');INSERT INTO `proxy` VALUES ('141', '222.185.137.204', '808', 'China', 'Elite', 'Tue Sep 26 21:06:32 2017', '5 1', '1', 'ly');INSERT INTO `proxy` VALUES ('142', '101.4.136.34', '80', 'China', 'Elite', 'Tue Sep 26 21:06:32 2017', '4 59', '1', 'ly');INSERT INTO `proxy` VALUES ('143', '122.72.99.104', '80', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '4 55', '1', 'ly');INSERT INTO `proxy` VALUES ('144', '114.215.103.121', '8081', 'China', 'Elite', 'Tue Sep 26 21:06:32 2017', '4 52', '1', 'ly');INSERT INTO `proxy` VALUES ('145', '159.226.249.93', '8080', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '4 48', '1', 'ly');INSERT INTO `proxy` VALUES ('146', '106.14.51.145', '8118', 'China', 'Elite', 'Tue Sep 26 21:06:32 2017', '4 41', '1', 'ly');INSERT INTO `proxy` VALUES ('147', '122.72.18.35', '80', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '4 39', '1', 'ly');INSERT INTO `proxy` VALUES ('148', '123.7.82.20', '3128', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '3 35', '1', 'ly');INSERT INTO `proxy` VALUES ('149', '122.228.179.178', '80', 'China', 'Elite', 'Tue Sep 26 21:06:32 2017', '3 28', '1', 'ly');INSERT INTO `proxy` VALUES ('150', '123.147.165.144', '8080', 'China', 'Transparent', 'Tue Sep 26 21:06:32 2017', '2 58', '1', 'ly');INSERT INTO `proxy` VALUES ('251', '203.88.210.121', '138', 'China', 'Elite', '17-09-26 21:04', '200天', '1', 'ly');INSERT INTO `proxy` VALUES ('252', '117.84.205.140', '8118', 'China', 'Elite', '17-09-26 21:02', '1天', '1', 'ly');INSERT INTO `proxy` VALUES ('253', '122.72.32.74', '80', 'China', 'Elite', '17-09-26 21:02', '335天', '1', 'ly');INSERT INTO `proxy` VALUES ('254', '49.77.210.116', '27475', 'China', 'Elite', '17-09-26 21:01', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('255', '121.204.165.35', '8118', 'China', 'Elite', '17-09-26 21:01', '265天', '1', 'ly');INSERT INTO `proxy` VALUES ('256', '49.64.103.196', '44074', 'China', 'Elite', '17-09-26 21:01', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('257', '60.169.220.213', '28481', 'China', 'Elite', '17-09-26 21:01', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('258', '61.135.217.7', '80', 'China', 'Elite', '17-09-26 21:01', '501天', '1', 'ly');INSERT INTO `proxy` VALUES ('259', '123.160.26.198', '32721', 'China', 'Elite', '17-09-26 21:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('260', '123.162.201.88', '39428', 'China', 'Elite', '17-09-26 21:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('261', '140.255.255.169', '8118', 'China', 'Elite', '17-09-26 20:55', '15小时', '1', 'ly');INSERT INTO `proxy` VALUES ('262', '171.39.29.221', '8123', 'China', 'Elite', '17-09-26 20:55', '62天', '1', 'ly');INSERT INTO `proxy` VALUES ('263', '27.159.125.151', '8118', 'China', 'Elite', '17-09-26 20:53', '2小时', '1', 'ly');INSERT INTO `proxy` VALUES ('264', '60.255.186.169', '8888', 'China', 'Elite', '17-09-26 20:52', '43天', '1', 'ly');INSERT INTO `proxy` VALUES ('265', '36.251.248.76', '80', 'China', 'Elite', '17-09-26 20:51', '20天', '1', 'ly');INSERT INTO `proxy` VALUES ('266', '121.12.42.181', '61234', 'China', 'Elite', '17-09-26 20:50', '25天', '1', 'ly');INSERT INTO `proxy` VALUES ('267', '120.78.15.63', '80', 'China', 'Elite', '17-09-26 20:46', '9天', '1', 'ly');INSERT INTO `proxy` VALUES ('268', '121.12.42.10', '61234', 'China', 'Elite', '17-09-26 20:45', '19天', '1', 'ly');INSERT INTO `proxy` VALUES ('269', '115.218.83.192', '80', 'China', 'Elite', '17-09-26 20:44', '1天', '1', 'ly');INSERT INTO `proxy` VALUES ('270', '49.81.250.174', '8118', 'China', 'Elite', '17-09-26 20:43', '14小时', '1', 'ly');INSERT INTO `proxy` VALUES ('271', '36.102.62.45', '80', 'China', 'Elite', '17-09-26 20:36', '6天', '1', 'ly');INSERT INTO `proxy` VALUES ('272', '101.68.73.54', '53281', 'China', 'Elite', '17-09-26 20:33', '41天', '1', 'ly');INSERT INTO `proxy` VALUES ('273', '180.118.243.174', '61234', 'China', 'Elite', '17-09-26 20:33', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('274', '117.69.2.252', '20037', 'China', 'Elite', '17-09-26 20:33', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('275', '1.195.10.101', '34401', 'China', 'Elite', '17-09-26 20:33', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('276', '110.73.15.7', '8123', 'China', 'Elite', '17-09-26 20:33', '16天', '1', 'ly');INSERT INTO `proxy` VALUES ('277', '222.163.214.90', '8118', 'China', 'Elite', '17-09-26 20:30', '18小时', '1', 'ly');INSERT INTO `proxy` VALUES ('278', '113.120.132.122', '8118', 'China', 'Elite', '17-09-26 20:23', '1天', '1', 'ly');INSERT INTO `proxy` VALUES ('279', '110.73.50.141', '8123', 'China', 'Elite', '17-09-26 20:22', '552天', '1', 'ly');INSERT INTO `proxy` VALUES ('280', '110.73.42.169', '8123', 'China', 'Elite', '17-09-26 20:15', '21天', '1', 'ly');INSERT INTO `proxy` VALUES ('281', '120.42.125.1', '28771', 'China', 'Elite', '17-09-26 20:11', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('282', '115.217.254.189', '30134', 'China', 'Elite', '17-09-26 20:11', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('283', '110.182.50.43', '8118', 'China', 'Elite', '17-09-26 20:04', '2天', '1', 'ly');INSERT INTO `proxy` VALUES ('284', '111.155.116.245', '8123', 'China', 'Elite', '17-09-26 20:04', '212天', '1', 'ly');INSERT INTO `proxy` VALUES ('285', '122.72.32.88', '80', 'China', 'Elite', '17-09-26 20:01', '335天', '1', 'ly');INSERT INTO `proxy` VALUES ('286', '180.122.155.128', '33103', 'China', 'Elite', '17-09-26 20:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('287', '144.12.30.69', '4382', 'China', 'Elite', '17-09-26 20:00', '1天', '1', 'ly');INSERT INTO `proxy` VALUES ('288', '122.242.94.63', '38006', 'China', 'Elite', '17-09-26 20:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('289', '180.120.200.240', '43902', 'China', 'Elite', '17-09-26 20:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('290', '1.194.118.164', '22850', 'China', 'Elite', '17-09-26 20:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('291', '110.73.52.34', '8123', 'China', 'Elite', '17-09-26 19:55', '705天', '1', 'ly');INSERT INTO `proxy` VALUES ('292', '222.141.15.186', '8118', 'China', 'Elite', '17-09-26 19:50', '12小时', '1', 'ly');INSERT INTO `proxy` VALUES ('293', '123.161.157.78', '43588', 'China', 'Elite', '17-09-26 19:33', '2分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('294', '113.121.250.165', '23785', 'China', 'Elite', '17-09-26 19:31', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('295', '111.155.116.215', '8123', 'China', 'Elite', '17-09-26 19:30', '168天', '1', 'ly');INSERT INTO `proxy` VALUES ('296', '113.124.92.36', '25869', 'China', 'Elite', '17-09-26 19:30', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('297', '113.107.161.44', '808', 'China', 'Elite', '17-09-26 19:22', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('298', '117.78.37.198', '8000', 'China', 'Elite', '17-09-26 19:21', '56天', '1', 'ly');INSERT INTO `proxy` VALUES ('299', '180.172.217.173', '34599', 'China', 'Elite', '17-09-26 19:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('300', '42.231.1.1', '80', 'China', 'Elite', '17-09-26 19:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('301', '115.221.127.232', '41445', 'China', 'Elite', '17-09-26 19:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('302', '115.221.127.232', '41445', 'China', 'Elite', '17-09-26 19:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('303', '121.31.100.194', '8123', 'China', 'Elite', '17-09-26 18:55', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('304', '49.73.100.36', '8118', 'China', 'Elite', '17-09-26 18:51', '10小时', '1', 'ly');INSERT INTO `proxy` VALUES ('305', '121.31.103.233', '8123', 'China', 'Elite', '17-09-26 18:33', '375天', '1', 'ly');INSERT INTO `proxy` VALUES ('306', '183.63.101.62', '53281', 'China', 'Elite', '17-09-26 18:33', '40天', '1', 'ly');INSERT INTO `proxy` VALUES ('307', '123.55.191.158', '808', 'China', 'Elite', '17-09-26 18:30', '80天', '1', 'ly');INSERT INTO `proxy` VALUES ('308', '113.128.27.212', '29016', 'China', 'Elite', '17-09-26 18:30', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('309', '60.24.153.214', '8118', 'China', 'Elite', '17-09-26 18:27', '10小时', '1', 'ly');INSERT INTO `proxy` VALUES ('310', '113.249.159.135', '8118', 'China', 'Elite', '17-09-26 18:25', '3小时', '1', 'ly');INSERT INTO `proxy` VALUES ('311', '27.184.124.175', '8118', 'China', 'Elite', '17-09-26 18:15', '7小时', '1', 'ly');INSERT INTO `proxy` VALUES ('312', '114.95.184.20', '65205', 'China', 'Elite', '17-09-26 18:12', '4小时', '1', 'ly');INSERT INTO `proxy` VALUES ('313', '183.63.223.2', '63000', 'China', 'Elite', '17-09-26 17:55', '294天', '1', 'ly');INSERT INTO `proxy` VALUES ('314', '115.46.122.35', '8123', 'China', 'Elite', '17-09-26 17:44', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('315', '110.182.239.81', '53281', 'China', 'Elite', '17-09-26 17:33', '6天', '1', 'ly');INSERT INTO `proxy` VALUES ('316', '110.72.218.113', '8123', 'China', 'Elite', '17-09-26 17:33', '516天', '1', 'ly');INSERT INTO `proxy` VALUES ('317', '121.204.165.172', '8118', 'China', 'Elite', '17-09-26 17:30', '282天', '1', 'ly');INSERT INTO `proxy` VALUES ('318', '114.89.157.106', '8118', 'China', 'Elite', '17-09-26 17:30', '11小时', '1', 'ly');INSERT INTO `proxy` VALUES ('319', '125.78.104.243', '37656', 'China', 'Elite', '17-09-26 17:30', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('320', '171.13.37.235', '808', 'China', 'Elite', '17-09-26 17:30', '159天', '1', 'ly');INSERT INTO `proxy` VALUES ('321', '117.25.190.25', '808', 'China', 'Elite', '17-09-26 17:30', '112天', '1', 'ly');INSERT INTO `proxy` VALUES ('322', '180.122.154.118', '22512', 'China', 'Elite', '17-09-26 17:30', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('323', '121.12.42.50', '61234', 'China', 'Elite', '17-09-26 17:27', '6天', '1', 'ly');INSERT INTO `proxy` VALUES ('324', '115.211.59.117', '8118', 'China', 'Elite', '17-09-26 17:24', '4小时', '1', 'ly');INSERT INTO `proxy` VALUES ('325', '121.31.195.82', '8123', 'China', 'Elite', '17-09-26 17:22', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('326', '180.127.149.107', '808', 'China', 'Elite', '17-09-26 17:15', '4小时', '1', 'ly');INSERT INTO `proxy` VALUES ('327', '49.77.210.67', '39862', 'China', 'Elite', '17-09-26 17:11', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('328', '60.182.236.230', '37150', 'China', 'Elite', '17-09-26 17:11', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('329', '121.31.102.45', '8123', 'China', 'Elite', '17-09-26 17:11', '207天', '1', 'ly');INSERT INTO `proxy` VALUES ('330', '60.23.40.20', '80', 'China', 'Elite', '17-09-26 17:00', '3天', '1', 'ly');INSERT INTO `proxy` VALUES ('331', '115.63.86.209', '80', 'China', 'Elite', '17-09-26 16:44', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('332', '1.63.107.198', '80', 'China', 'Elite', '17-09-26 16:41', '2天', '1', 'ly');INSERT INTO `proxy` VALUES ('333', '220.166.243.246', '8118', 'China', 'Elite', '17-09-26 16:40', '4天', '1', 'ly');INSERT INTO `proxy` VALUES ('334', '119.5.177.133', '80', 'China', 'Elite', '17-09-26 16:22', '52天', '1', 'ly');INSERT INTO `proxy` VALUES ('335', '119.5.177.155', '4386', 'China', 'Elite', '17-09-26 16:22', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('336', '117.95.105.151', '36355', 'China', 'Elite', '17-09-26 16:01', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('337', '59.40.51.253', '8010', 'China', 'Elite', '17-09-26 15:44', '16天', '1', 'ly');INSERT INTO `proxy` VALUES ('338', '140.250.158.95', '40601', 'China', 'Elite', '17-09-26 15:33', '2分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('339', '49.88.168.166', '46914', 'China', 'Elite', '17-09-26 15:30', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('340', '123.55.3.169', '24281', 'China', 'Elite', '17-09-26 15:30', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('341', '36.25.27.202', '25065', 'China', 'Elite', '17-09-26 15:30', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('342', '110.87.4.118', '27023', 'China', 'Elite', '17-09-26 15:22', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('343', '221.205.61.105', '80', 'China', 'Elite', '17-09-26 15:22', '6小时', '1', 'ly');INSERT INTO `proxy` VALUES ('344', '49.87.177.104', '32659', 'China', 'Elite', '17-09-26 15:11', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('345', '59.49.129.60', '8998', 'China', 'Elite', '17-09-26 15:09', '219天', '1', 'ly');INSERT INTO `proxy` VALUES ('346', '218.5.161.215', '35216', 'China', 'Elite', '17-09-26 15:00', '1分钟', '1', 'ly');INSERT INTO `proxy` VALUES ('347', '27.40.143.209', '61234', 'China', 'Elite', '17-09-26 14:56', '6小时', '1', 'ly');INSERT INTO `proxy` VALUES ('348', '110.73.8.214', '8123', 'China', 'Elite', '17-09-26 14:45', '208天', '1', 'ly');INSERT INTO `proxy` VALUES ('349', '180.118.240.167', '61234', 'China', 'Elite', '17-09-26 14:34', '2小时', '1', 'ly');INSERT INTO `proxy` VALUES ('350', '61.142.240.132', '808', 'China', 'Elite', '17-09-26 14:34', '102天', '1', 'ly');]]></content>
      <categories>
        <category>千里码</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
        <tag>js</tag>
      </tags>
  </entry>
</search>
